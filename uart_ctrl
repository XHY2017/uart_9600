`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    10:57:14 12/21/2017 
// Design Name: 
// Module Name:    uartctrl 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module uartctrl(
	input wire clk,
	input wire rdsig,
	input wire [7:0] rxdata,
	output wrsig,
	output wire [7:0] dataout
    );
reg [17:0] uart_wait;
reg [15:0] uart_cnt;
reg rx_data_valid;
reg [7:0] store [19:0];	//存储发送字符
reg [2:0] uart_stat;
reg [8:0] k;
reg [7:0] dataout_reg;
reg data_sel;
reg wrsig_reg;

assign dataout  = 	data_sel ?dataout_reg:rxdata;
assign wrsig	=		data_sel ?wrsig_reg:rdsig;

always @ (*)
	begin
		store[0]	<= 72;
		store[1]	<= 101;
		store[2]	<= 108;
		store[3]	<= 108;
		store[4]	<= 111;
		store[5]	<= 32;
		store[6]	<= 65;
		store[7]	<= 76;
		store[8]	<= 73;
		store[9]	<= 78;
		store[10]	<= 88;
		store[11]	<= 32;
		store[12]	<= 65;
		store[13]	<= 88;
		store[14]	<= 51;
		store[15]	<= 48;
		store[16]	<= 57;
		store[17]	<= 32;
		store[18]	<= 10;
		store[19]	<= 13;
	end       
//串口发送字符串
always @(posedge clk)
	begin
		if(rdsig == 1'b1)
			begin
				uart_cnt	<=	0;
				uart_stat	<=	3'b000;
				data_sel	<=	1'b0;
			end
		else 
			case(uart_stat)
				3'b000: begin
							if(rx_data_valid==1'b1)
								begin
									uart_stat	<= 3'b001;
									data_sel	<= 1'b1;
								end
						end
				3'b001: begin		//发送19个字符
							if(k==18)
								begin
									if(uart_cnt==0)
										begin
											dataout_reg	<= store[18];
											uart_cnt	<= uart_cnt + 1'b1;
											wrsig_reg	<= 1'b1;
										end
									else if(uart_cnt == 254)
										begin
											uart_cnt	<= 0;
											wrsig_reg	<= 1'b0;
											uart_stat	<= 3'b010;
											k			<= 0;
										end
									else 
										begin
											uart_cnt	<= uart_cnt + 1'b1;
											wrsig_reg	<= 1'b0;
										end	
								end
							else
								begin
									if(uart_cnt==0)begin
										dataout_reg	<= store[k];
										uart_cnt	<= uart_cnt + 1'b1;
										wrsig_reg	<= 1'b1;
									end
									else if(uart_cnt==254)begin
										uart_cnt	<= 1'b0;
										wrsig_reg	<= 1'b0;
										k	<= k + 1'b1;
									end
									else begin
										uart_cnt	<= uart_cnt + 1'b1; 
										wrsig_reg	<= 1'b0;
									end
								end
						end
						3'b010:begin		//发送finish
								uart_stat	<= 3'b000;
								data_sel	<= 1'b0;
						end
						default:uart_stat	<= 3'b000;
			endcase			
				
	end

//////串口发送控制

always @(posedge clk)
begin
	if(rdsig == 1'b1)begin
		uart_wait	<= 0;
		rx_data_valid	<= 1'b0;
		
	end
	else begin
		if(uart_wait	==18'h3fff)begin
			uart_wait	<= 0;
			rx_data_valid	<= 1'b1;
			
		end
		else begin
			uart_wait	<= uart_wait + 1'b1;
			rx_data_valid	<= 1'b0;
		end
	end
end

endmodule
