`timescale 1ns / 1ps
module uarttx(
	input wire clk,				//UART时钟
	input wire [7:0] datain,	//需要发送的数据
	input wire wrsig,			//发送命令上升沿有效
	output reg idle,			//线路状态指示，高为线路忙，低为线路空闲
	output reg tx				//发送数据信号
    );

reg send;
reg wrsigbuf;
reg wrsigrise;
reg presult;

reg [7:0] cnt;
parameter paritymode = 1'b0;

always @(posedge clk)//上升沿检测
begin
	wrsigbuf		<= wrsig;
	wrsigrise	<= wrsig	& (~wrsigbuf);
end
always @(posedge clk)
begin
	if(wrsigrise && (~idle))begin
		send	<= 1'b1;
	end
	else if(cnt == 8'd168)begin
		send 	<= 1'b0;
	end
end

always @(posedge clk)
begin
	if(send==1'b1)begin
		case (cnt)
		8'd0:begin
			idle 	<= 1'b1;
			tx	<= 1'b0;
			cnt <=	cnt + 1'b1;
		end
		8'd16:begin//鍙戦€佺0浣
			idle 	<= 1'b1;
			tx	<= datain[0];
			cnt <=	cnt + 1'b1;
			presult <= datain[0] ^ paritymode;
		end
		8'd32:begin//鍙戦€佺1浣
			idle 	<= 1'b1;
			tx	<= datain[1];
			cnt <=	cnt + 1'b1;
			presult <= datain[1] ^ presult;
		end
		8'd48:begin//鍙戦€佺2浣
			idle 	<= 1'b1;
			tx	<= datain[2];
			cnt <=	cnt + 1'b1;
			presult <= datain[2] ^ presult;
		end
		8'd64:begin//鍙戦€佺3浣
			idle 	<= 1'b1;
			tx	<= datain[3];
			cnt <=	cnt + 1'b1;
			presult <= datain[3] ^ presult;
		end
		8'd80:begin//鍙戦€佺4浣
			idle 	<= 1'b1;
			tx	<= datain[4];
			cnt <=	cnt + 1'b1;
			presult <= datain[4] ^ presult;
		end
		8'd96:begin//鍙戦€佺5浣
			idle 	<= 1'b1;
			tx	<= datain[5];
			cnt <=	cnt + 1'b1;
			presult <= datain[5] ^ presult;
		end
		8'd112:begin//鍙戦€佺6浣
			idle 	<= 1'b1;
			tx	<= datain[6];
			cnt <=	cnt + 1'b1;
			presult <= datain[6] ^ presult;
		end
		8'd128:begin//鍙戦€佺7浣
			idle 	<= 1'b1;
			tx	<= datain[7];
			cnt <=	cnt + 1'b1;
			presult <= datain[7] ^ presult;
		end
		8'd144:begin//鍙戦€佸鍋舵牎楠屼綅
			idle 	<= 1'b1;
			tx	<= presult;
			cnt <=	cnt + 1'b1;

		end
		8'd160:begin//鍙戦€佸仠姝綅
			idle 	<= 1'b1;
			tx	<= 1'b1;
			cnt <=	cnt + 1'b1;

		end
		8'd168:begin//鍙戦€佸仠姝綅
			idle 	<= 1'b0;
			tx	<= 1'b1;
			cnt <=	cnt + 1'b1;

		end
		default:
			cnt <= cnt + 1'b1;
		endcase
	end
	else begin
		tx 		<= 1'b1;
		cnt 	<= 8'd0;
		idle	<= 1'b0;
	end
end
endmodule
